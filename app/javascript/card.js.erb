// PAY.JPライブラリの読み込み確認
if (typeof Payjp === 'undefined') {
  console.error('PAY.JPライブラリが読み込まれていません');
  alert('カード情報の読み込みに失敗しました。ページを再読み込みしてください。');
  throw new Error('PAY.JP library not loaded');
}

const payjpPublicKey = document.querySelector('meta[name="payjp-public-key"]').content;

// デバッグ用：公開鍵が設定されているか確認
console.log('PAYJP_PUBLIC_KEY:', payjpPublicKey);
console.log('PAYJP_PUBLIC_KEY length:', payjpPublicKey ? payjpPublicKey.length : 0);
if (!payjpPublicKey || payjpPublicKey === '') {
  console.error('PAYJP_PUBLIC_KEYが設定されていません');
  alert('PAY.JPの設定が正しくありません。管理者にお問い合わせください。');
  throw new Error('PAYJP_PUBLIC_KEY not set');
} else if (!payjpPublicKey.startsWith('pk_test_') && !payjpPublicKey.startsWith('pk_live_')) {
  console.error('PAYJP_PUBLIC_KEYの形式が正しくありません:', payjpPublicKey);
  alert('PAY.JPの設定が正しくありません。管理者にお問い合わせください。');
  throw new Error('Invalid PAYJP_PUBLIC_KEY format');
}

let payjp, numberElement, expiryElement, cvcElement;

try {
  payjp = Payjp(payjpPublicKey);
  console.log('PAY.JP initialized:', payjp);
  
  const elements = payjp.elements();
  console.log('PAY.JP elements:', elements);

  numberElement = elements.create('cardNumber');
  expiryElement = elements.create('cardExpiry');
  cvcElement = elements.create('cardCvc');

  numberElement.mount('#number-form');
  expiryElement.mount('#expiry-form');
  cvcElement.mount('#cvc-form');
  
  console.log('PAY.JP elements mounted successfully');
  
  // フォーム送信イベントリスナーを初期化後に設定
  const form = document.getElementById('charge-form');
  if (form) {
    form.addEventListener("submit", (e) => {
      e.preventDefault();

      payjp.createToken(numberElement).then((response) => {
        if (response.error) {
          // デバッグ用：コンソールにエラー内容を出力
          console.log('PAY.JP Error:', response.error);
          console.log('Error status:', response.error.status);
          console.log('Error code:', response.error.code);
          console.log('Error message:', response.error.message);
          
          // エラーメッセージをページに表示
          const errorDiv = document.getElementById('card-error-message');
          if (errorDiv) {
            let errorMessage = response.error.message;
            
            // 402エラーの場合は特別なメッセージを表示
            if (response.error.status === 402) {
              errorMessage = 'PAY.JPのAPIキーが正しく設定されていません。テスト用のAPIキーを設定してください。';
            }
            
            errorDiv.textContent = errorMessage;
            errorDiv.style.display = 'block';
          }
          return;
        }
        const token = response.id;
        const tokenInput = document.createElement("input");
        tokenInput.setAttribute("type", "hidden");
        tokenInput.setAttribute("name", "token");
        tokenInput.setAttribute("value", token);
        form.appendChild(tokenInput);

        // エラーメッセージをクリア
        const errorDiv = document.getElementById('card-error-message');
        if (errorDiv) {
          errorDiv.style.display = 'none';
        }

        // フォーム送信（サーバーサイドのバリデーションエラーはページリロードで表示される）
        form.submit();
      });
    });
  }
} catch (error) {
  console.error('PAY.JP initialization error:', error);
  alert('カード情報の初期化に失敗しました。ページを再読み込みしてください。');
}
